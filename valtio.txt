import {
  AccumulativeShadows,
  Center,
  ContactShadows,
  Environment,
  OrbitControls,
  RandomizedLight,
  useGLTF,
} from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import { Suspense, useEffect, useRef, useState } from "react";
import { useSnapshot, proxy } from "valtio"; // Import proxy from valtio
import { HexColorPicker } from "react-colorful";
import { Scene } from "three";

// Define a proxy object to store the state
const state = proxy({
  selectedPart: null,
  items: {
    Group24115: "#ffffff",
    Default: "#ffffff",
    Group59965: "#ffffff",
    Group1755: "#ffffff",
    Group15983: "#ffffff",
    Group15983_1: "#ffffff",
  }, // Initial color
});

export function Model(props) {
  const { nodes, materials } = useGLTF("/projectshoe.gltf");
  const ref = useRef();
  const snap = useSnapshot(state);

  // Function to handle part selection and color change
  const handlePartClick = (part) => {
    state.selectedPart = part;
    console.log(part);
  };
  const [hovered, sethovered] = useState(null);

  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${snap.items[hovered]}"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    const auto = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/></svg>`;
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
      hovered ? cursor : auto
    )}'), auto`;
  }, [hovered]);

  return (
    <group
      ref={ref}
      dispose={null}
      {...props}
      rotation={[0.7, 0, 0.3]}
      dispose={null}
    >
      {/* Mesh 1: Group24115 */}
      <mesh
        castShadow
        receiveShadow
        position={[0, -1.5, 1]}
        scale={[18, 18, 18]}
        geometry={nodes.Group24115.geometry}
        material-color={snap.items.Group24115}
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Group24115"))}
        onClick={() => handlePartClick("Group24115")}
      >
        <meshStandardMaterial color={snap.items.Group24115} attach="material" />
      </mesh>

      {/* Mesh 2: Default */}
      <mesh
        castShadow
        receiveShadow
        position={[0, -1.5, 1]}
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Default"))}
        scale={[18, 18, 18]}
        geometry={nodes.Default.geometry}
        material-color={snap.items.Default}
        onClick={() => handlePartClick("Default")}
      >
        <meshStandardMaterial color={snap.items.Default} attach="material" />
      </mesh>

      {/* Mesh 3: Group59965 */}
      <mesh
        castShadow
        receiveShadow
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Group59965"))}
        position={[0, -1.5, 1]}
        scale={[18, 18, 18]}
        geometry={nodes.Group59965.geometry}
        material-color={snap.items.Group59965}
        onClick={() => handlePartClick("Group59965")}
      >
        <meshStandardMaterial color={snap.items.Group59965} attach="material" />
      </mesh>

      {/* Mesh 4: Group1755 */}
      <mesh
        castShadow
        receiveShadow
        position={[0, -1.5, 1]}
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Group1755"))}
        scale={[18, 18, 18]}
        geometry={nodes.Group1755.geometry}
        material-color={snap.items.Group1755}
        onClick={() => handlePartClick("Group1755")}
      >
        <meshStandardMaterial color={snap.items.Group1755} attach="material" />
      </mesh>

      {/* Mesh 5: Group15983 */}
      <mesh
        castShadow
        receiveShadow
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Group15983"))}
        position={[0, -1.5, 1]}
        scale={[18, 18, 18]}
        geometry={nodes.Group15983.geometry}
        material-color={snap.items.Group15983}
        onClick={() => handlePartClick("Group15983")}
      >
        <meshStandardMaterial color={snap.items.Group15983} attach="material" />
      </mesh>

      {/* Mesh 6: Group15983_1 */}
      <mesh
        castShadow
        onPointerOut={(e) => e.intersections.length === 0 && sethovered(null)}
        onPointerOver={(e) => (e.stopPropagation(), sethovered("Group15983_1"))}
        receiveShadow
        position={[0, -1.5, 1]}
        scale={[18, 18, 18]}
        geometry={nodes.Group15983_1.geometry}
        material-color={snap.items.Group15983_1}
        onClick={() => handlePartClick("Group15983_1")}
      >
        <meshStandardMaterial
          color={snap.items.Group15983_1}
          attach="material"
        />
      </mesh>
    </group>
  );
}

function Picker() {
  // Function to handle color change
  const handleChange = (color) => {
    state.items[state.selectedPart] = color;
    console.log(state.items[state.selectedPart], color);
  };

  return (
    <div>
      <HexColorPicker
        className="picker"
        color={state.items[state.selectedPart]}
        onChange={handleChange}
      />
      <h1></h1>
    </div>
  );
}

export default function LeftSide() {
  // Function to save SVG
  const svgSaver = () => {
    const canvas = document.querySelector("Canvas");
    const dataurl = canvas.toDataURL("");
    const link = document.createElement("a");
    link.href = dataurl;
    link.download = "canvas.png";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <>
      <h1 className="mb-20  bg-black ">{state.items && state.items.length}</h1>
      <div className="h-[100vh] z-[50] w-full bg-white rounded">
        <Canvas shadows gl={{ preserveDrawingBuffer: true }}>
          <Suspense fallback={null}>
            <ambientLight />
            <spotLight intensity={1.5} />
            <Environment files="royal_esplanade_1k.hdr" />
            <OrbitControls
              autoRotate
              autoRotateSpeed={1}
              enableZoom={true}
              enablePan={true}
              enableRotate={true}
              minPolarAngle={0}
              maxPolarAngle={(Math.PI / 2) * 0.9}
            />
            <Center>
              <Model />
            </Center>
            <ContactShadows position={[0, -2, 0]} blur={2} opacity={0.5} />
          </Suspense>
        </Canvas>
      </div>

      <Picker />

      {/* Add a button to save SVG */}
      <div
        onClick={svgSaver}
        className="fixed bottom-0 right-2 p-2 bg-green-500 text-white cursor-pointer"
      >
        download SVG
      </div>
    </>
  );
}
